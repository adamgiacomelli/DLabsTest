!function(){"use strict";angular.module("dlabsApp",["ngResource","ui.router","ngMaterial","ngMdIcons","LocalStorageModule","datetime","angular-uuid","ngWebSocket","ng-showdown"]).run(["$rootScope",function($rootScope){}])}(),function(){"use strict";angular.module("dlabsApp").config(["$stateProvider","$urlRouterProvider","$locationProvider","localStorageServiceProvider",function($stateProvider,$urlRouterProvider,$locationProvider,localStorageServiceProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("home",{url:"/",templateUrl:"partials/core/home.html",controller:"FrontpageCtrl"}),$locationProvider.html5Mode({enabled:!0,requireBase:!1}),localStorageServiceProvider.setPrefix("dlabs")}])}(),function(){"use strict";angular.module("dlabsApp").controller("FrontpageCtrl",["$scope","$interval","localStorageService","dWebsocket","uuid",function($scope,$interval,localStorageService,dWebsocket,uuid){function backupContent(){var change={user:$scope.user.name,timestamp:new Date,content:$scope.content.text};if(0!=$scope.changeCollection.length){var lastChangeText=$scope.changeCollection.slice(-1)[0].content;lastChangeText!=$scope.content.text&&($scope.changeCollection.push(change),dWebsocket.updateCollection($scope.changeCollection))}else $scope.changeCollection.push(change);$scope.saveToLocalStorage()}function mergeStrings(sA,sB){for(var linesLast=sA.split("\n"),linesCurrent=sB.split("\n"),merged=[],j=0,i=0;void 0!=linesLast[i]||void 0!=linesCurrent[j];)void 0==linesLast[i]&&(merged.push(linesCurrent[j]),j++),void 0==linesCurrent[j]&&(merged.push(linesLast[i]),i++),linesLast[i]==linesCurrent[j]?(merged.push(linesLast[i]),j++,i++):(merged.push(linesLast[i]),merged.push(linesCurrent[j]),j++,i++);return merged.join("\n")}var userId=uuid.v4();$scope.saveToLocalStorage=function(){var storageBox={user:$scope.user,content:$scope.content,changeCollection:$scope.changeCollection};localStorageService.set(localStorageKey,storageBox)};var localStorageKey="dlabsAppContents",localContents=localStorageService.get(localStorageKey);localContents?($scope.user=localContents.user,$scope.content=localContents.content,$scope.changeCollection=localContents.changeCollection):($scope.user={name:"Anonymous",id:userId},$scope.content={text:""},$scope.changeCollection=[],$scope.saveToLocalStorage());var updateCollectionCB=function(collection,merge){$scope.changeCollection=collection;var lastChangeText=$scope.changeCollection.slice(-1)[0].content;$scope.content.text!=lastChangeText&&(merge?$scope.content.text=mergeStrings(lastChangeText,$scope.content.text):$scope.content.text=lastChangeText)},getCollectionCB=function(){return $scope.changeCollection};$scope.users=[],dWebsocket.initialize("ws://10.9.0.25:1234",$scope.user,updateCollectionCB,getCollectionCB,$scope.users),$scope.connection=dWebsocket.connection,$interval(function(){backupContent(),dWebsocket.heartbeat()},2e3),$scope.revertToChange=function(change){var index=$scope.changeCollection.findIndex(function(element){return element.user==change.user&&element.timestamp==change.timestamp});$scope.content.text=change.content,$scope.changeCollection.splice(index+1,$scope.changeCollection.length-index),dWebsocket.updateCollection($scope.changeCollection),$scope.saveToLocalStorage()}}])}(),function(){"use strict";angular.module("dlabsApp").factory("dWebsocket",function($websocket){function constructMessage(content,type){return{type:type,content:content,uid:client.id}}var dataStream,client,users,updateCollection,MessageTypes=Object.freeze({ConnectedClient:0,Update:1,UpdateState:2,HeartBeat:3,MergeOnNewConnect:4}),connection={connected:!1},initFlag=!1,initialize=function(socketUrl,user,updateCollectionCB,getCollectionCB,initUsers){client=user,users=initUsers,updateCollection=updateCollectionCB,dataStream=$websocket(socketUrl),dataStream.onMessage(function(message){var parsedMsg=JSON.parse(message.data);if(parsedMsg.uid!=client.id)switch(parsedMsg.type){case MessageTypes.ConnectedClient:dataStream.send(JSON.stringify(constructMessage(getCollectionCB(),MessageTypes.MergeOnNewConnect)));break;case MessageTypes.MergeOnNewConnect:initFlag&&(initFlag=!1,updateCollection(parsedMsg.content,!0));break;case MessageTypes.UpdateState:updateCollection(parsedMsg.content);break;case MessageTypes.HeartBeat:var usr=users.find(function(elem){return elem.client.id==parsedMsg.uid});usr?usr.ttl=5:users.push({client:parsedMsg.content,ttl:5})}}),dataStream.onOpen(function(msg){console.log("opened",msg),connection.state=!0,initFlag=!0,dataStream.send(JSON.stringify(constructMessage(client,MessageTypes.ConnectedClient)))}),dataStream.onClose(function(msg){console.log("closed",msg),connection.state=!1})},update=function(change){dataStream.send(JSON.stringify(constructMessage(change,MessageTypes.Update)))},updateCollection=function(collection){dataStream.send(JSON.stringify(constructMessage(collection,MessageTypes.UpdateState)))},heartbeat=function(){dataStream.send(JSON.stringify(constructMessage(client,MessageTypes.HeartBeat))),users.forEach(function(usr,i,arr){arr[i].ttl--})},methods={connection:connection,update:update,updateCollection:updateCollection,heartbeat:heartbeat,initialize:initialize};return methods})}();